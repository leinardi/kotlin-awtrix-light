name: Release KAL

on:
  workflow_dispatch:
    inputs:
      semver:
        description: 'Release Semantic Versioning (e.g. 1.2.3)'
        required: true

jobs:
  build-release:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    # we push to GHCR and create a deployment, so the token needs packages & deployments
    permissions:
      contents: write       # create tag & release
      packages: write       # push container image
      deployments: write    # create deployment + status

    env:
      TERM: dumb
      KAL_VERSION: ${{ github.event.inputs.semver }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create release tag
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              ref:  `refs/tags/${process.env.KAL_VERSION}`,
              sha:  context.sha
            })

      # fetch tags so Gradle can read them if needed
      - name: Fetch full history
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Copy CI gradle.properties
        run: |
          mkdir -p ~/.gradle
          cp .github/ci-gradle.properties ~/.gradle/gradle.properties

      - name: Build fat-JAR
        run: ./gradlew dist -PkalVersion=${{ env.KAL_VERSION }}

      - name: Extract major version
        id: vars
        run: |
          echo "major=${KAL_VERSION%%.*}" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          build-args: |
            KAL_VERSION=${{ env.KAL_VERSION }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/kotlin-awtrix-light:${{ env.KAL_VERSION }}
            ghcr.io/${{ github.repository_owner }}/kotlin-awtrix-light:${{ steps.vars.outputs.major }}
            ghcr.io/${{ github.repository_owner }}/kotlin-awtrix-light:latest
          platforms: linux/amd64,linux/arm64

      - name: Upload build outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kal-fat-${{ env.KAL_VERSION }}.jar
          path: kal/build/libs/kal-fat-${{ env.KAL_VERSION }}.jar

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.KAL_VERSION }}
          fail_on_unmatched_files: true
          generate_release_notes: true
          files: |
            kal/build/libs/kal-fat-${{ env.KAL_VERSION }}.jar

      - name: Record deployment
        uses: actions/github-script@v7
        with:
          script: |
            const version  = process.env.KAL_VERSION;
            const imageRef = `ghcr.io/${context.repo.owner}/kotlin-awtrix-light:${version}`;

            // create (or reuse) a deployment
            const deploy = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              ref:   context.sha,
              environment: 'ghcr',
              description: `Container image ${imageRef}`,
              required_contexts: []     // do not wait for other CIs
            });

            // mark it as successful
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              deployment_id: deploy.data.id,
              state: 'success',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              environment_url: `https://ghcr.io/${context.repo.owner}/kotlin-awtrix-light`
            });

      - name: Delete release tag on failure
        if: ${{ failure() || cancelled() }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.deleteRef({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              ref:   `tags/${process.env.KAL_VERSION}`
            })
